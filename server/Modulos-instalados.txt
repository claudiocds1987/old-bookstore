tutorial de fazt code: https://www.youtube.com/watch?v=z4BNZfZ1Wq8&t=1537s

Abrí visual studio code en vacio
1) En escritorio cree una carpeta cds-bookstore-new y adentro de esta carpeta (cree una carpeta server y otra llamada frontend).
2) Arrastrar la carpeta server a visual studio code

lista de paquetes instalados en la carpeta server.

IMPORTANTE: A medida que se van instalando algunos modulos, necesitan hacer algunas configuraciones en package.json o tsconfig.json por eso abajo de todo
estan copiados los dos archivos con todas las configuraciones hechas en el tutorial.

Desde consola:

1) npm init -y (para iniciar un proyecto de nodejs, genera un package.json para describir el nombre del servidor, version, etc..)

2) npm i typescript -D (instala typescript "-D" significa como dependencia de desarrollo)

3) npx tsc --init (compilador de typescript. Es "npx", no es npm. Se va a crear un archivo tsconfig.json, este archivo le dice a typescript hacia que entorno
 va a compilar. Es decir como javascript puede ser utilizado en el navegador y tambien en el servidor incluso en otros entornos, tenemos que decirle a typescript 
los archivos los vas a convertir para el navegador o para el servidor).

4) instalo modulo express y el modulo/driver "pg" para coneccion a base de datos postgresql
npm i express pg

5) npm i @types/express -D (se instala los tipos de datos express para typescript).

6) Instalar el módulo "nodemon" para que reinicie de forma automatica el servidor nodejs cuando guardo los cambios ante algun cambio en el código. ( -D signfica para desarrollo).
	npm i nodemon -D 

7) npm i concurrently -D

8)instalar extension de react graphql (ES7 React/Redux/GraphQL/React-Native snippets) desde studio code para autocompletado de codigo.

ASI DEBE QUEDAR LA CONFIGURACION DEL ARCHIVO PACKAGE.JSON despues de instalar todos los modulos
{
  "name": "server",
  "version": "1.0.0",
  "description": "",
  "main": "server.js",
  "scripts": {
    "dev": "concurrently \"tsc --watch\" \"nodemon dist/server.js\"",
    "build": "tsc"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "@types/express": "^4.17.8",
    "@types/pg": "^7.14.5",
    "concurrently": "^5.3.0",
    "nodemon": "^2.0.4",
    "typescript": "^4.0.3"
  },
  "dependencies": {
    "bcrypt": "^5.0.0",
    "cors": "^2.8.5",
    "express": "^4.17.1",
    "multer": "^1.4.2",
    "pg": "^8.4.0",
    "stripe": "^8.126.0",
    "uuid": "^8.3.1"
  }
}

ASI DEBE QUEDAR LA CONFIGURACION DEL ARCHIVO TSCONFIG.JSON despues de instalar todos los modulos
{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig.json to read more about this file */

    /* Basic Options */
    // "incremental": true,                   /* Enable incremental compilation */
    "target": "es6",                          /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */
    "module": "commonjs",                     /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */
    // "lib": [],                             /* Specify library files to be included in the compilation. */
    // "allowJs": true,                       /* Allow javascript files to be compiled. */
    // "checkJs": true,                       /* Report errors in .js files. */
    // "jsx": "preserve",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */
    // "declaration": true,                   /* Generates corresponding '.d.ts' file. */
    // "declarationMap": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */
    // "sourceMap": true,                     /* Generates corresponding '.map' file. */
    // "outFile": "./",                       /* Concatenate and emit output to single file. */
    "outDir": "./dist",                        /* Redirect output structure to the directory. */
    "rootDir": "./src",                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */
    // "composite": true,                     /* Enable project compilation */
    // "tsBuildInfoFile": "./",               /* Specify file to store incremental compilation information */
    // "removeComments": true,                /* Do not emit comments to output. */
    // "noEmit": true,                        /* Do not emit outputs. */
    // "importHelpers": true,                 /* Import emit helpers from 'tslib'. */
    // "downlevelIteration": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
    // "isolatedModules": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */

    /* Strict Type-Checking Options */
    //"strict": true, //esto estaba descomentado
    "noImplicitAny": false, //esto lo agregue yo
    /* Enable all strict type-checking options. */
    // "noImplicitAny": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,              /* Enable strict null checks. */
    // "strictFunctionTypes": true,           /* Enable strict checking of function types. */
    // "strictBindCallApply": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */
    // "strictPropertyInitialization": true,  /* Enable strict checking of property initialization in classes. */
    // "noImplicitThis": true,                /* Raise error on 'this' expressions with an implied 'any' type. */
    // "alwaysStrict": true,                  /* Parse in strict mode and emit "use strict" for each source file. */

    /* Additional Checks */
    // "noUnusedLocals": true,                /* Report errors on unused locals. */
    // "noUnusedParameters": true,            /* Report errors on unused parameters. */
    // "noImplicitReturns": true,             /* Report error when not all code paths in function return a value. */
    // "noFallthroughCasesInSwitch": true,    /* Report errors for fallthrough cases in switch statement. */

    /* Module Resolution Options */
    "moduleResolution": "node",            /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    // "baseUrl": "./",                       /* Base directory to resolve non-absolute module names. */
    // "paths": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
    // "rootDirs": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */
    // "typeRoots": [],                       /* List of folders to include type definitions from. */
    // "types": [],                           /* Type declaration files to be included in compilation. */
    // "allowSyntheticDefaultImports": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
    "esModuleInterop": true,                  /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */
    // "preserveSymlinks": true,              /* Do not resolve the real path of symlinks. */
    // "allowUmdGlobalAccess": true,          /* Allow accessing UMD globals from modules. */

    /* Source Map Options */
    // "sourceRoot": "",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */
    // "mapRoot": "",                         /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,               /* Emit a single file with source maps instead of having a separate file. */
    // "inlineSources": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */

    /* Experimental Options */
    // "experimentalDecorators": true,        /* Enables experimental support for ES7 decorators. */
    // "emitDecoratorMetadata": true,         /* Enables experimental support for emitting type metadata for decorators. */

    /* Advanced Options */
    "skipLibCheck": true,                     /* Skip type checking of declaration files. */
    "forceConsistentCasingInFileNames": true  /* Disallow inconsistently-cased references to the same file. */
  },
  "exclude": ["node_modules"]
}
